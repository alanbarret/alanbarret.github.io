/**
 * @fileoverview Firestore Security Rules for the Alan Barret - AI Developer Portfolio application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user can only access and modify data
 * under their own user ID. All data is private to the user.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, ensuring clear ownership.
 *   - /users/{userId}/projects/{projectId}
 *   - /users/{userId}/projects/{projectId}/aiToneSuggestions/{aiToneSuggestionId}
 *   - /users/{userId}/experience/{experienceId}
 *   - /users/{userId}/skills/{skillId}
 *   - /users/{userId}/certifications/{certificationId}
 *
 * Key Security Decisions:
 *   - User data is strictly isolated. No cross-user access is allowed.
 *   - Listing other users is forbidden.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is signed in
    function isSignedIn() {
      return request.auth != null;
    }

    // Helper function to check if the authenticated user is the owner of the document.
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // Helper function to check if the authenticated user is the existing owner of the document.
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to user-specific data. Only the authenticated user can access their own data.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' creates their own user document.
     * @allow (get) User with ID 'user123' retrieves their own user document.
     * @allow (update) User with ID 'user123' updates their own user document.
     * @allow (delete) User with ID 'user123' deletes their own user document.
     * @deny (create) User with ID 'user456' tries to create a document for user 'user123'.
     * @deny (get) User with ID 'user456' tries to retrieve the document of user 'user123'.
     * @principle Enforces strict user ownership.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // No listing of users

      // Allow the user to create their own user document.
      allow create: if isOwner(userId);

      // Only the owner can update their profile, and the userId must not be changed.
      allow update: if isExistingOwner(userId);

      // Only the owner can delete their profile.
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to project documents for a specific user.
     * @path /users/{userId}/projects/{projectId}
     * @allow (create) User with ID 'user123' creates a project document.
     * @allow (get) User with ID 'user123' retrieves a project document.
     * @allow (update) User with ID 'user123' updates a project document.
     * @allow (delete) User with ID 'user123' deletes a project document.
     * @deny (create) User with ID 'user456' tries to create a project document for user 'user123'.
     * @deny (get) User with ID 'user456' tries to retrieve a project document for user 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/projects/{projectId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to AI tone suggestions for a specific project.
     * @path /users/{userId}/projects/{projectId}/aiToneSuggestions/{aiToneSuggestionId}
     * @allow (create) User with ID 'user123' creates an AI tone suggestion document.
     * @allow (get) User with ID 'user123' retrieves an AI tone suggestion document.
     * @allow (update) User with ID 'user123' updates an AI tone suggestion document.
     * @allow (delete) User with ID 'user123' deletes an AI tone suggestion document.
     * @deny (create) User with ID 'user456' tries to create an AI tone suggestion document for user 'user123'.
     * @deny (get) User with ID 'user456' tries to retrieve an AI tone suggestion document for user 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/projects/{projectId}/aiToneSuggestions/{aiToneSuggestionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to experience documents for a specific user.
     * @path /users/{userId}/experience/{experienceId}
     * @allow (create) User with ID 'user123' creates an experience document.
     * @allow (get) User with ID 'user123' retrieves an experience document.
     * @allow (update) User with ID 'user123' updates an experience document.
     * @allow (delete) User with ID 'user123' deletes an experience document.
     * @deny (create) User with ID 'user456' tries to create an experience document for user 'user123'.
     * @deny (get) User with ID 'user456' tries to retrieve an experience document for user 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/experience/{experienceId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to skill documents for a specific user.
     * @path /users/{userId}/skills/{skillId}
     * @allow (create) User with ID 'user123' creates a skill document.
     * @allow (get) User with ID 'user123' retrieves a skill document.
     * @allow (update) User with ID 'user123' updates a skill document.
     * @allow (delete) User with ID 'user123' deletes a skill document.
     * @deny (create) User with ID 'user456' tries to create a skill document for user 'user123'.
     * @deny (get) User with ID 'user456' tries to retrieve a skill document for user 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/skills/{skillId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to certification documents for a specific user.
     * @path /users/{userId}/certifications/{certificationId}
     * @allow (create) User with ID 'user123' creates a certification document.
     * @allow (get) User with ID 'user123' retrieves a certification document.
     * @allow (update) User with ID 'user123' updates a certification document.
     * @allow (delete) User with ID 'user123' deletes a certification document.
     * @deny (create) User with ID 'user456' tries to create a certification document for user 'user123'.
     * @deny (get) User with ID 'user456' tries to retrieve a certification document for user 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/certifications/{certificationId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}